import os
import asyncio
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.errors import FloodWaitError
from openai import OpenAI

# Load environment variables
load_dotenv()

# Telegram credentials
api_id = int(os.getenv("TELEGRAM_API_ID"))
api_hash = os.getenv("TELEGRAM_API_HASH")
channels = os.getenv("CHANNELS", "").split(",")
chat_id = os.getenv("CHAT_ID")

# OpenRouter credentials
openrouter_api_key = os.getenv("OPENROUTER_API_KEY")
openai_client = OpenAI(
    api_key=openrouter_api_key,
    base_url="https://openrouter.ai/api/v1",
    default_headers={"Authorization": f"Bearer {openrouter_api_key}"}
)

client = TelegramClient("safe_session", api_id, api_hash)

async def summarize(title, text):
    # prompt = f"Summarize key insights from the last 24 hours in the Telegram chat or channel in Russian language'{title}':\n\n{text}"
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram-—á–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –∑–∞–Ω—è—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –±—ã—Å—Ç—Ä–æ –ø–æ–Ω—è—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é. –ò–∑–ª–æ–∂–∏ –≤ —Å–∂–∞—Ç–æ–π —Ñ–æ—Ä–º–µ, –∫–∞–∫–∏–µ –±—ã–ª–∏:
    - –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è,
    - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏, –∏–Ω—Å–∞–π—Ç—ã, —Å–ø–æ—Ä—ã,
    - –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏.

    –ö–∞–∂–¥—É—é —Ç–µ–º—É –æ—Ü–µ–Ω–∏ –ø–æ **–≤–µ—Å—É** (–Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π, –≤–∞–∂–Ω–æ–π, –æ–±—Å—É–∂–¥–∞–µ–º–æ–π) ‚Äî –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5, –≥–¥–µ:
    - 1 ‚Äî —É–ø–æ–º—è–Ω—É–ª–∏ –≤—Å–∫–æ–ª—å–∑—å,
    - 3 ‚Äî —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å,
    - 5 ‚Äî –æ—á–µ–Ω—å –±—É—Ä–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.

    –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –±—ã–ª–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ –∏–ª–∏ –ø—É—Å—Ç—ã–µ ‚Äî —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º. –ù–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç **–ø–æ –ø—É–Ω–∫—Ç–∞–º —Å –≤–µ—Å–∞–º–∏** –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.

    –í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{text}
    """

    try:
        response = openai_client.chat.completions.create(
            model="openai/gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=600,
            temperature=0.4
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error generating summary: {e}"

async def fetch_messages_safe(entity):
    try:
        yesterday = datetime.now(timezone.utc) - timedelta(days=1)
        messages = await client.get_messages(entity, limit=200, offset_date=datetime.now(timezone.utc))
        return "\n".join([msg.message for msg in messages if msg.message and msg.date > yesterday])
    except FloodWaitError as e:
        print(f"‚ö†Ô∏è Flood wait ‚Äî sleeping {e.seconds} seconds...")
        await asyncio.sleep(e.seconds)
        return await fetch_messages_safe(entity)
    except Exception as e:
        print(f"Error fetching messages: {e}")
        return ""

async def main():
    await client.start()
    print("‚úÖ Telegram authorization successful.")

    summaries = []

    # –ö–∞–Ω–∞–ª—ã
    for ch in channels[:min(5, len(channels))]:
        ch = ch.strip()
        if not ch:
            continue

        print(f"\nüì• Processing channel: {ch}")
        try:
            entity = await client.get_entity(ch)
            text = await fetch_messages_safe(entity)

            if not text.strip():
                summaries.append(f"## {ch}\n\nNo recent messages in the last 24 hours.\n\n")
            else:
                summary = await summarize(ch, text)
                summaries.append(f"## {ch}\n\n{summary}\n\n")

            await asyncio.sleep(3)
        except Exception as e:
            summaries.append(f"## {ch}\n\nError: {e}\n\n")

    # –ß–∞—Ç –ø–æ ID
    if chat_id:
        print(f"\nüí¨ Processing chat ID: {chat_id}")
        try:
            entity = await client.get_entity(int(chat_id))
            text = await fetch_messages_safe(entity)

            if not text.strip():
                summaries.append(f"## Chat {chat_id}\n\nNo recent messages in the last 24 hours.\n\n")
            else:
                summary = await summarize(f"Chat {chat_id}", text)
                summaries.append(f"## Chat {chat_id}\n\n{summary}\n\n")

            await asyncio.sleep(3)
        except Exception as e:
            summaries.append(f"## Chat {chat_id}\n\nError: {e}\n\n")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open("summary_safe.md", "w", encoding="utf-8") as f:
        f.writelines(summaries)

    print("\n‚úÖ Done! Summary saved to summary_safe.md")

# Run
asyncio.run(main())